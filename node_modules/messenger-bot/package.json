{
  "name": "messenger-bot",
  "version": "2.1.0",
  "description": "FB Messenger Platform client",
  "main": "index.js",
  "scripts": {
    "test": "standard && nyc tap test/*.js",
    "travis-coveralls": "nyc report --reporter=text-lcov | coveralls"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/remixz/messenger-bot.git"
  },
  "keywords": [
    "messenger",
    "api",
    "client",
    "bot"
  ],
  "author": {
    "name": "Zach Bruggeman",
    "email": "mail@bruggie.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/remixz/messenger-bot/issues"
  },
  "homepage": "https://github.com/remixz/messenger-bot#readme",
  "dependencies": {
    "request": "^2.71.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.9",
    "nock": "^8.0.0",
    "nyc": "^6.4.0",
    "standard": "^6.0.8",
    "tap": "^5.7.1"
  },
  "gitHead": "3b8d6ede4654817e52ee2058c4ead3b9f976f56a",
  "_id": "messenger-bot@2.1.0",
  "_shasum": "89febc2711976e76b7a1dc89dc47780b16095558",
  "_from": "messenger-bot",
  "_npmVersion": "3.5.3",
  "_nodeVersion": "4.2.4",
  "_npmUser": {
    "name": "remixz",
    "email": "zbruggeman@me.com"
  },
  "maintainers": [
    {
      "name": "remixz",
      "email": "mail@bruggie.com"
    }
  ],
  "dist": {
    "shasum": "68b4c72836bd82df1841f36e3ed35759c9256136",
    "tarball": "https://registry.npmjs.org/messenger-bot/-/messenger-bot-2.1.0.tgz"
  },
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/messenger-bot-2.1.0.tgz_1461014606632_0.8199771444778889"
  },
  "directories": {},
  "_resolved": "file:messenger-bot",
  "readme": "# messenger-bot\n[![Build Status](https://travis-ci.org/remixz/messenger-bot.svg?branch=master)](https://travis-ci.org/remixz/messenger-bot)\n[![Coverage Status](https://coveralls.io/repos/github/remixz/messenger-bot/badge.svg?branch=master)](https://coveralls.io/github/remixz/messenger-bot?branch=master)\n[![npm version](https://img.shields.io/npm/v/messenger-bot.svg)](https://www.npmjs.com/package/messenger-bot)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n\nA Node client for the [Facebook Messenger Platform](https://developers.facebook.com/docs/messenger-platform).\n\nRequires Node >=4.0.0.\n\n## Installation\n\n```bash\nnpm install messenger-bot\n```\n\n## Example\n\nSee more examples in [the examples folder.](https://github.com/remixz/messenger-bot/tree/master/example)\n\nRun this example in the cloud: [![Nitrous Quickstart](https://nitrous-image-icons.s3.amazonaws.com/quickstart.svg)](https://www.nitrous.io/quickstart)\n* Setup `PAGE_TOKEN`, `VERIFY_TOKEN`, `APP_SECRET` and start the example by `Run > Start Messenger Echo Bot`.\n* Your Webhook URL is available at `Preview > 3000` in the IDE.\n\n```js\nconst http = require('http')\nconst Bot = require('messenger-bot')\n\nlet bot = new Bot({\n  token: 'PAGE_TOKEN',\n  verify: 'VERIFY_TOKEN',\n  app_secret: 'APP_SECRET'\n})\n\nbot.on('error', (err) => {\n  console.log(err.message)\n})\n\nbot.on('message', (payload, reply) => {\n  let text = payload.message.text\n\n  bot.getProfile(payload.sender.id, (err, profile) => {\n    if (err) throw err\n\n    reply({ text }, (err) => {\n      if (err) throw err\n\n      console.log(`Echoed back to ${profile.first_name} ${profile.last_name}: ${text}`)\n    })\n  })\n})\n\nhttp.createServer(bot.middleware()).listen(3000)\nconsole.log('Echo bot server running at port 3000.')\n```\n\n## Usage\n\n### Functions\n\n#### `let bot = new Bot(opts)`\n\nReturns a new Bot instance.\n\n`opts` - Object\n\n* `token` - String: Your Page Access Token, found in your App settings. Required.\n* `verify` - String: A verification token for the first-time setup of your webhook. Optional, but will be required by Facebook when you first set up your webhook.\n* `app_secret` - String: Your App Secret token used for message integrity check. If specified, every POST request  will be tested for spoofing. Optional.\n\n#### `bot.middleware()`\n\nThe main middleware for your bot's webhook. Returns a function. Usage:\n\n```js\nconst http = require('http')\nconst Bot = require('messenger-bot')\n\nlet bot = new Bot({\n  token: 'PAGE_TOKEN',\n  verify: 'VERIFY_TOKEN'\n})\n\nhttp.createServer(bot.middleware()).listen(3000)\n```\n\nAs well, it mounts `/_status`, which will return `{\"status\": \"ok\"}` if the middleware is running. If `verify` is specified in the bot options, it will mount a handler for `GET` requests that verifies the webhook.\n\n#### `bot.sendMessage(recipient, payload, callback)`\n\nSends a message with the `payload` to the target `recipient`, and calls the callback. See [Send API](https://developers.facebook.com/docs/messenger-platform/send-api-reference#request).\n\n* `recipient` - Number: The Facebook ID of the intended recipient.\n* `payload` - Object: The message payload. Should follow the [Send API format](https://developers.facebook.com/docs/messenger-platform/send-api-reference).\n* `callback` - Function: Called with `(err, info)` once the request has completed. `err` contains an error, if any, and `info` contains the response from Facebook, usually with the new message's ID.\n\n#### `bot.getProfile(target, callback)`\n\nReturns profile information of the `target`, called in the `callback`. See [User Profile API](https://developers.facebook.com/docs/messenger-platform/send-api-reference#user_profile_request).\n\n* `target` - Number: The Facebook ID of the intended target.\n* `callback` - Function: Called with `(err, profile)` once the request has completed. `err` contains an error, if any, and `info` contains the response from Facebook, in this format:\n\n```json\n{\n  \"first_name\": \"Zach\",\n  \"last_name\": \"Bruggeman\",\n  \"profile_pic\": \"<url to profile picture>\"\n}\n```\n\n#### `bot._handleMessage(payload)`\n\nThe underlying method used by `bot.middleware()` to parse the message payload, and fire the appropriate events. Use this if you've already implemented your own middleware or route handlers to receive the webhook request, and just want to fire the events on the bot instance. See [the echo bot implemented in Express](https://github.com/remixz/messenger-bot/blob/master/example/echo-express.js) for an example.\n\n* `payload` - Object: The payload sent by Facebook to the webhook.\n\n#### `bot._verify(req, res)`\n\nThe underlying method used by `bot.middleware()` for the initial webhook verification. Use this if you've already implemented your own middleware or route handlers, and wish to handle the request without implementing `bot.middleware()`. See [the echo bot implemented in Express](https://github.com/remixz/messenger-bot/blob/master/example/echo-express.js) for an example.\n\n* `req` - Request: The `http` request object.\n* `res` - Response: The `http` response object.\n\n### Events\n\n#### bot.on('message', (payload, reply))\n\nTriggered when a message is sent to the bot.\n\n* `payload` - Object: An object containing the message event's payload from Facebook. See [Facebook's documentation](https://developers.facebook.com/docs/messenger-platform/webhook-reference#received_message) for the format.\n* `reply` - Function: A convenience function that calls `bot.sendMessage`, with the recipient automatically set to the message sender's Facebook ID. Example usage:\n\n```js\nbot.on('message', (payload, reply) => {\n  reply({ text: 'hey!'}, (err, info) => {})\n})\n```\n\n#### bot.on('postback', (payload, reply))\n\nTriggered when a postback is triggered by the sender in Messenger.\n\n* `payload` - Object: An object containing the postback event's payload from Facebook. See [Facebook's documentation](https://developers.facebook.com/docs/messenger-platform/webhook-reference#postback) for the format.\n* `reply` - Function: A convenience function that calls `bot.sendMessage`, with the recipient automatically set to the message sender's Facebook ID. Example usage:\n\n```js\nbot.on('postback', (payload, reply) => {\n  reply({ text: 'hey!'}, (err, info) => {})\n})\n```\n\n#### bot.on('delivery', (payload, reply))\n\nTriggered when a message has been successfully delivered.\n\n* `payload` - Object: An object containing the delivery event's payload from Facebook. See [Facebook's documentation](https://developers.facebook.com/docs/messenger-platform/webhook-reference#message_delivery) for the format.\n* `reply` - Function: A convenience function that calls `bot.sendMessage`, with the recipient automatically set to the message sender's Facebook ID. Example usage:\n\n```js\nbot.on('delivery', (payload, reply) => {\n  reply({ text: 'hey!'}, (err, info) => {})\n})\n```\n",
  "readmeFilename": "README.md"
}
